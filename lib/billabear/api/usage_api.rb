=begin
#BillaBear

#The REST API provided by BillaBear

OpenAPI spec version: 1.1.0
Contact: support@billabear.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module Billabear
  class UsageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Usage Limit
    # Create Usage Limit for the custoemr
    # @param body 
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [UsageLimit]
    def create_customer_usage_limit(body, customer_id, opts = {})
      data, _status_code, _headers = create_customer_usage_limit_with_http_info(body, customer_id, opts)
      data
    end

    # Create Usage Limit
    # Create Usage Limit for the custoemr
    # @param body 
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsageLimit, Integer, Hash)>] UsageLimit data, response status code and response headers
    def create_customer_usage_limit_with_http_info(body, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.create_customer_usage_limit ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UsageApi.create_customer_usage_limit"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UsageApi.create_customer_usage_limit"
      end
      # resource path
      local_var_path = '/customer/{customerId}/uasge-limit'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'UsageLimit' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#create_customer_usage_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Event
    # Creates an event that is used for usage billing
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_event(body, opts = {})
      create_event_with_http_info(body, opts)
      nil
    end

    # Create Event
    # Creates an event that is used for usage billing
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_event_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.create_event ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UsageApi.create_event"
      end
      # resource path
      local_var_path = '/events'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#create_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Usage Limit
    # Delete Usage Limit for the custoemr
    # @param customer_id The id of the customer to retrieve
    # @param usage_limit_id The id of the usage limit
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def customer_customer_id_uasge_limit_limit_id_delete(customer_id, usage_limit_id, opts = {})
      customer_customer_id_uasge_limit_limit_id_delete_with_http_info(customer_id, usage_limit_id, opts)
      nil
    end

    # Delete Usage Limit
    # Delete Usage Limit for the custoemr
    # @param customer_id The id of the customer to retrieve
    # @param usage_limit_id The id of the usage limit
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def customer_customer_id_uasge_limit_limit_id_delete_with_http_info(customer_id, usage_limit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.customer_customer_id_uasge_limit_limit_id_delete ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UsageApi.customer_customer_id_uasge_limit_limit_id_delete"
      end
      # verify the required parameter 'usage_limit_id' is set
      if @api_client.config.client_side_validation && usage_limit_id.nil?
        fail ArgumentError, "Missing the required parameter 'usage_limit_id' when calling UsageApi.customer_customer_id_uasge_limit_limit_id_delete"
      end
      # resource path
      local_var_path = '/customer/{customerId}/uasge-limit/{limitId}'.sub('{' + 'customerId' + '}', customer_id.to_s).sub('{' + 'usageLimitId' + '}', usage_limit_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#customer_customer_id_uasge_limit_limit_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Usage Cost Estimate
    # The estimated costs from usage based billing for a customer
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def get_customer_costs(customer_id, opts = {})
      data, _status_code, _headers = get_customer_costs_with_http_info(customer_id, opts)
      data
    end

    # Usage Cost Estimate
    # The estimated costs from usage based billing for a customer
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def get_customer_costs_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.get_customer_costs ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UsageApi.get_customer_costs"
      end
      # resource path
      local_var_path = '/customer/{customerId}/costs'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2001' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#get_customer_costs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch Customer Usage Limits
    # Usage Limits for a specific customer
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def get_customer_usage_limits_by_id(customer_id, opts = {})
      data, _status_code, _headers = get_customer_usage_limits_by_id_with_http_info(customer_id, opts)
      data
    end

    # Fetch Customer Usage Limits
    # Usage Limits for a specific customer
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def get_customer_usage_limits_by_id_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsageApi.get_customer_usage_limits_by_id ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UsageApi.get_customer_usage_limits_by_id"
      end
      # resource path
      local_var_path = '/customer/{customerId}/uasge-limit'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2005' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsageApi#get_customer_usage_limits_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
