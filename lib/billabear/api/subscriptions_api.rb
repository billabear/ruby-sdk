=begin
#BillaBear

#The REST API provided by BillaBear

OpenAPI spec version: 1.1.0
Contact: support@billabear.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module Billabear
  class SubscriptionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Seats
    # Adds seats to a per seat subscription<br><br><strong>Since 1.1.4</strong>
    # @param body 
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20013]
    def add_seats_subscriptions(body, subscription_id, opts = {})
      data, _status_code, _headers = add_seats_subscriptions_with_http_info(body, subscription_id, opts)
      data
    end

    # Add Seats
    # Adds seats to a per seat subscription&lt;br&gt;&lt;br&gt;&lt;strong&gt;Since 1.1.4&lt;/strong&gt;
    # @param body 
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20013, Integer, Hash)>] InlineResponse20013 data, response status code and response headers
    def add_seats_subscriptions_with_http_info(body, subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.add_seats_subscriptions ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscriptionsApi.add_seats_subscriptions"
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.add_seats_subscriptions"
      end
      # resource path
      local_var_path = '/subscription/{subscriptionId}/seats/add'.sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse20013' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#add_seats_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel Subscription
    # Info for a specific subscription
    # @param body 
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_subscription(body, subscription_id, opts = {})
      cancel_subscription_with_http_info(body, subscription_id, opts)
      nil
    end

    # Cancel Subscription
    # Info for a specific subscription
    # @param body 
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_subscription_with_http_info(body, subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.cancel_subscription ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscriptionsApi.cancel_subscription"
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.cancel_subscription"
      end
      # resource path
      local_var_path = '/subscription/{subscriptionId}/cancel'.sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#cancel_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change Price
    # Changes the price being used for a price. Useful for changing pricing schedule or just price.
    # @param body 
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20013]
    def change_subscription_price(body, subscription_id, opts = {})
      data, _status_code, _headers = change_subscription_price_with_http_info(body, subscription_id, opts)
      data
    end

    # Change Price
    # Changes the price being used for a price. Useful for changing pricing schedule or just price.
    # @param body 
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20013, Integer, Hash)>] InlineResponse20013 data, response status code and response headers
    def change_subscription_price_with_http_info(body, subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.change_subscription_price ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscriptionsApi.change_subscription_price"
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.change_subscription_price"
      end
      # resource path
      local_var_path = '/subscription/{subscriptionId}/price'.sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse20013' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#change_subscription_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Subscription
    # Create subscription for a customer
    # @param body 
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Subscription]
    def create_subscription(body, customer_id, opts = {})
      data, _status_code, _headers = create_subscription_with_http_info(body, customer_id, opts)
      data
    end

    # Create Subscription
    # Create subscription for a customer
    # @param body 
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def create_subscription_with_http_info(body, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.create_subscription ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscriptionsApi.create_subscription"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling SubscriptionsApi.create_subscription"
      end
      # resource path
      local_var_path = '/customer/{customerId}/subscription/start'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Subscription' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#create_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change Subscription Plan
    # Change the subscription plan for a customer
    # @param body 
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Subscription]
    def customer_change_subscription_plan(body, subscription_id, opts = {})
      data, _status_code, _headers = customer_change_subscription_plan_with_http_info(body, subscription_id, opts)
      data
    end

    # Change Subscription Plan
    # Change the subscription plan for a customer
    # @param body 
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def customer_change_subscription_plan_with_http_info(body, subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.customer_change_subscription_plan ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscriptionsApi.customer_change_subscription_plan"
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.customer_change_subscription_plan"
      end
      # resource path
      local_var_path = '/subscription/{subscriptionId}/plan'.sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Subscription' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#customer_change_subscription_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Extend Trial Subscription
    # Extend a trial subscription so it's converted from a trial to a normal subscription.
    # @param body 
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Subscription]
    def extend_trial(body, subscription_id, opts = {})
      data, _status_code, _headers = extend_trial_with_http_info(body, subscription_id, opts)
      data
    end

    # Extend Trial Subscription
    # Extend a trial subscription so it&#x27;s converted from a trial to a normal subscription.
    # @param body 
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def extend_trial_with_http_info(body, subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.extend_trial ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscriptionsApi.extend_trial"
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.extend_trial"
      end
      # resource path
      local_var_path = '/subscription/{subscriptionId}/extend'.sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Subscription' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#extend_trial\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Customer Active Subscriptions
    # List all Active customer subscriptions
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2008]
    def get_active_for_customer(customer_id, opts = {})
      data, _status_code, _headers = get_active_for_customer_with_http_info(customer_id, opts)
      data
    end

    # List Customer Active Subscriptions
    # List all Active customer subscriptions
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def get_active_for_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.get_active_for_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling SubscriptionsApi.get_active_for_customer"
      end
      # resource path
      local_var_path = '/customer/{customerId}/subscription/active'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2008' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#get_active_for_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Customer Subscriptions
    # List all customer subscriptions<br><br><strong>Since 1.1</strong>
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2008]
    def get_for_customer(customer_id, opts = {})
      data, _status_code, _headers = get_for_customer_with_http_info(customer_id, opts)
      data
    end

    # List Customer Subscriptions
    # List all customer subscriptions&lt;br&gt;&lt;br&gt;&lt;strong&gt;Since 1.1&lt;/strong&gt;
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def get_for_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.get_for_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling SubscriptionsApi.get_for_customer"
      end
      # resource path
      local_var_path = '/customer/{customerId}/subscription'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2008' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#get_for_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Subscription Plans
    # List all subscriptions plans
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 100)
    # @option opts [String] :last_key The key to be used in pagination to say what the last key of the previous page was
    # @return [InlineResponse20012]
    def list_subscription_plans(opts = {})
      data, _status_code, _headers = list_subscription_plans_with_http_info(opts)
      data
    end

    # List Subscription Plans
    # List all subscriptions plans
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 100)
    # @option opts [String] :last_key The key to be used in pagination to say what the last key of the previous page was
    # @return [Array<(InlineResponse20012, Integer, Hash)>] InlineResponse20012 data, response status code and response headers
    def list_subscription_plans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.list_subscription_plans ...'
      end
      # resource path
      local_var_path = '/subscription/plans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'last_key'] = opts[:'last_key'] if !opts[:'last_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20012' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#list_subscription_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List
    # List all subscriptions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 100)
    # @option opts [String] :last_key The key to be used in pagination to say what the last key of the previous page was
    # @return [InlineResponse2008]
    def list_subscriptions(opts = {})
      data, _status_code, _headers = list_subscriptions_with_http_info(opts)
      data
    end

    # List
    # List all subscriptions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 100)
    # @option opts [String] :last_key The key to be used in pagination to say what the last key of the previous page was
    # @return [Array<(InlineResponse2008, Integer, Hash)>] InlineResponse2008 data, response status code and response headers
    def list_subscriptions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.list_subscriptions ...'
      end
      # resource path
      local_var_path = '/subscription'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'last_key'] = opts[:'last_key'] if !opts[:'last_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2008' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#list_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove Seats
    # Remove seats to a per seat subscription<br><br><strong>Since 1.1.4</strong>
    # @param body 
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20013]
    def remove_seats_subscriptions(body, subscription_id, opts = {})
      data, _status_code, _headers = remove_seats_subscriptions_with_http_info(body, subscription_id, opts)
      data
    end

    # Remove Seats
    # Remove seats to a per seat subscription&lt;br&gt;&lt;br&gt;&lt;strong&gt;Since 1.1.4&lt;/strong&gt;
    # @param body 
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20013, Integer, Hash)>] InlineResponse20013 data, response status code and response headers
    def remove_seats_subscriptions_with_http_info(body, subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.remove_seats_subscriptions ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscriptionsApi.remove_seats_subscriptions"
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.remove_seats_subscriptions"
      end
      # resource path
      local_var_path = '/subscription/{subscriptionId}/seats/remove'.sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'InlineResponse20013' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#remove_seats_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Detail
    # Info for a specific subscription
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Subscription]
    def show_subscription_by_id(subscription_id, opts = {})
      data, _status_code, _headers = show_subscription_by_id_with_http_info(subscription_id, opts)
      data
    end

    # Detail
    # Info for a specific subscription
    # @param subscription_id The id of the subscription to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def show_subscription_by_id_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.show_subscription_by_id ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling SubscriptionsApi.show_subscription_by_id"
      end
      # resource path
      local_var_path = '/subscription/{subscriptionId}'.sub('{' + 'subscriptionId' + '}', subscription_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Subscription' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#show_subscription_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Start Trial Subscription For Customer
    # Start subscription for a customer
    # @param body 
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Subscription]
    def start_trial(body, customer_id, opts = {})
      data, _status_code, _headers = start_trial_with_http_info(body, customer_id, opts)
      data
    end

    # Start Trial Subscription For Customer
    # Start subscription for a customer
    # @param body 
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Subscription, Integer, Hash)>] Subscription data, response status code and response headers
    def start_trial_with_http_info(body, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriptionsApi.start_trial ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscriptionsApi.start_trial"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling SubscriptionsApi.start_trial"
      end
      # resource path
      local_var_path = '/customer/{customerId}/subscription/trial'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Subscription' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriptionsApi#start_trial\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
