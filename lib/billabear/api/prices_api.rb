=begin
#BillaBear

#The REST API provided by BillaBear

OpenAPI spec version: 1.1.0
Contact: support@billabear.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.66
=end

module Billabear
  class PricesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create
    # Create a price
    # @param body 
    # @param product_id The id of the product to retrieve
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_price(body, product_id, opts = {})
      create_price_with_http_info(body, product_id, opts)
      nil
    end

    # Create
    # Create a price
    # @param body 
    # @param product_id The id of the product to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_price_with_http_info(body, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricesApi.create_price ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PricesApi.create_price"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling PricesApi.create_price"
      end
      # resource path
      local_var_path = '/product/{productId}/price'.sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricesApi#create_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List
    # List all prices
    # @param product_id The id of the product to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 100)
    # @option opts [String] :last_key The key to be used in pagination to say what the last key of the previous page was
    # @return [InlineResponse20011]
    def list_price(product_id, opts = {})
      data, _status_code, _headers = list_price_with_http_info(product_id, opts)
      data
    end

    # List
    # List all prices
    # @param product_id The id of the product to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 100)
    # @option opts [String] :last_key The key to be used in pagination to say what the last key of the previous page was
    # @return [Array<(InlineResponse20011, Integer, Hash)>] InlineResponse20011 data, response status code and response headers
    def list_price_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PricesApi.list_price ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling PricesApi.list_price"
      end
      # resource path
      local_var_path = '/product/{productId}/price'.sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'last_key'] = opts[:'last_key'] if !opts[:'last_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse20011' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PricesApi#list_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
