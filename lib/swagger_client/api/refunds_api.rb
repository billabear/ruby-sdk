=begin
#BillaBear

#The REST API provided by BillaBear

OpenAPI spec version: 1.0.0
Contact: support@billabear.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.56
=end

module SwaggerClient
  class RefundsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List Customer Refunds
    # List Customer Refund
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 100)
    # @option opts [String] :last_key The key to be used in pagination to say what the last key of the previous page was
    # @option opts [String] :name The name to search for
    # @return [InlineResponse2002]
    def get_refunds_for_customer(customer_id, opts = {})
      data, _status_code, _headers = get_refunds_for_customer_with_http_info(customer_id, opts)
      data
    end

    # List Customer Refunds
    # List Customer Refund
    # @param customer_id The id of the customer to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 100)
    # @option opts [String] :last_key The key to be used in pagination to say what the last key of the previous page was
    # @option opts [String] :name The name to search for
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def get_refunds_for_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefundsApi.get_refunds_for_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling RefundsApi.get_refunds_for_customer"
      end
      # resource path
      local_var_path = '/customer/{customerId}/refund'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'last_key'] = opts[:'last_key'] if !opts[:'last_key'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2002' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefundsApi#get_refunds_for_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List
    # List all refund
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 100)
    # @option opts [String] :last_key The key to be used in pagination to say what the last key of the previous page was
    # @option opts [String] :name The name to search for
    # @return [InlineResponse2002]
    def list_refund(opts = {})
      data, _status_code, _headers = list_refund_with_http_info(opts)
      data
    end

    # List
    # List all refund
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many items to return at one time (max 100)
    # @option opts [String] :last_key The key to be used in pagination to say what the last key of the previous page was
    # @option opts [String] :name The name to search for
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def list_refund_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefundsApi.list_refund ...'
      end
      # resource path
      local_var_path = '/refund'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'last_key'] = opts[:'last_key'] if !opts[:'last_key'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2002' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefundsApi#list_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Detail
    # Info for a specific Refund
    # @param refund_id The id of the refund
    # @param [Hash] opts the optional parameters
    # @return [Refund]
    def show_refund_by_id(refund_id, opts = {})
      data, _status_code, _headers = show_refund_by_id_with_http_info(refund_id, opts)
      data
    end

    # Detail
    # Info for a specific Refund
    # @param refund_id The id of the refund
    # @param [Hash] opts the optional parameters
    # @return [Array<(Refund, Integer, Hash)>] Refund data, response status code and response headers
    def show_refund_by_id_with_http_info(refund_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefundsApi.show_refund_by_id ...'
      end
      # verify the required parameter 'refund_id' is set
      if @api_client.config.client_side_validation && refund_id.nil?
        fail ArgumentError, "Missing the required parameter 'refund_id' when calling RefundsApi.show_refund_by_id"
      end
      # resource path
      local_var_path = '/refund/{refundId}'.sub('{' + 'refundId' + '}', refund_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Refund' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefundsApi#show_refund_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
