=begin
#BillaBear

#The REST API provided by BillaBear

OpenAPI spec version: 1.0.0
Contact: support@billabear.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.56
=end

require 'date'

module SwaggerClient
  class Customer
    attr_accessor :id

    attr_accessor :email

    # The tax number for the customer <strong>Since 1.1</strong>
    attr_accessor :tax_number

    # The tax rate for the customer on for standard services a <strong>Since 1.1</strong>
    attr_accessor :standard_tax_rate

    # The tax rate for the customer on digital services <strong>Since 1.1</strong>
    attr_accessor :digital_tax_rate

    # Choice between card and invoice
    attr_accessor :billing_type

    # Choice between 'individual' and 'business'. When not provided 'individual' is used. <strong>Since 1.1</strong>
    attr_accessor :type

    attr_accessor :reference

    attr_accessor :external_reference

    attr_accessor :address

    # Defaults to 'en' if not sent.
    attr_accessor :locale

    # Defaults to 'default' if not sent.
    attr_accessor :brand

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'email' => :'email',
        :'tax_number' => :'tax_number',
        :'standard_tax_rate' => :'standard_tax_rate',
        :'digital_tax_rate' => :'digital_tax_rate',
        :'billing_type' => :'billing_type',
        :'type' => :'type',
        :'reference' => :'reference',
        :'external_reference' => :'external_reference',
        :'address' => :'address',
        :'locale' => :'locale',
        :'brand' => :'brand'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'email' => :'Object',
        :'tax_number' => :'Object',
        :'standard_tax_rate' => :'Object',
        :'digital_tax_rate' => :'Object',
        :'billing_type' => :'Object',
        :'type' => :'Object',
        :'reference' => :'Object',
        :'external_reference' => :'Object',
        :'address' => :'Object',
        :'locale' => :'Object',
        :'brand' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'tax_number',
        :'standard_tax_rate',
        :'digital_tax_rate',
        :'billing_type',
        :'type',
        :'locale',
        :'brand'
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::Customer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::Customer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'tax_number')
        self.tax_number = attributes[:'tax_number']
      end

      if attributes.key?(:'standard_tax_rate')
        self.standard_tax_rate = attributes[:'standard_tax_rate']
      end

      if attributes.key?(:'digital_tax_rate')
        self.digital_tax_rate = attributes[:'digital_tax_rate']
      end

      if attributes.key?(:'billing_type')
        self.billing_type = attributes[:'billing_type']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.key?(:'external_reference')
        self.external_reference = attributes[:'external_reference']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.key?(:'brand')
        self.brand = attributes[:'brand']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @email.nil?
      billing_type_validator = EnumAttributeValidator.new('Object', ['card', 'invoice'])
      return false unless billing_type_validator.valid?(@billing_type)
      type_validator = EnumAttributeValidator.new('Object', ['individual', 'business'])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_type Object to be assigned
    def billing_type=(billing_type)
      validator = EnumAttributeValidator.new('Object', ['card', 'invoice'])
      unless validator.valid?(billing_type)
        fail ArgumentError, "invalid value for \"billing_type\", must be one of #{validator.allowable_values}."
      end
      @billing_type = billing_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('Object', ['individual', 'business'])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          email == o.email &&
          tax_number == o.tax_number &&
          standard_tax_rate == o.standard_tax_rate &&
          digital_tax_rate == o.digital_tax_rate &&
          billing_type == o.billing_type &&
          type == o.type &&
          reference == o.reference &&
          external_reference == o.external_reference &&
          address == o.address &&
          locale == o.locale &&
          brand == o.brand
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, email, tax_number, standard_tax_rate, digital_tax_rate, billing_type, type, reference, external_reference, address, locale, brand].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
